"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[349],{1776:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var i=t(4848),a=t(8453);const s={},o="Validation",d={id:"Guides/validation",title:"Validation",description:"This document will detail what validation and consistency checks the db-sync-node does and does",source:"@site/docs/Guides/validation.md",sourceDirName:"Guides",slug:"/Guides/validation",permalink:"/cardano-db-sync/Guides/validation",draft:!1,unlisted:!1,editUrl:"https://github.com/sgillespie/cardano-db-sync/tree/docs/docusaurus/doc/docusaurus/docs/Guides/validation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Upgrading PostgreSQL",permalink:"/cardano-db-sync/Guides/upgrading-postgresql"}},r={},c=[{value:"Assumptions",id:"assumptions",level:2},{value:"Genesis Validation",id:"genesis-validation",level:2},{value:"Block Validation",id:"block-validation",level:2},{value:"Transaction Validation",id:"transaction-validation",level:2},{value:"Runtime Reward Validations",id:"runtime-reward-validations",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"validation",children:"Validation"}),"\n",(0,i.jsx)(n.p,{children:"This document will detail what validation and consistency checks the db-sync-node does and does\nnot do, and what assumptions it makes. It will also note what validation is done every time\nthe db-sync-node is restarted and what validation is only done when new data arrives from the\nnode."}),"\n",(0,i.jsx)(n.p,{children:"The data stored in the database is designed to be an accurate but incomplete (eg cryptographic\nsignatures are elided) representation of the history of the blockchain so that the current\nstate or any state of the blockchain in the past can be reconstructed with an SQL query."}),"\n",(0,i.jsx)(n.h2,{id:"assumptions",children:"Assumptions"}),"\n",(0,i.jsx)(n.p,{children:"The db-sync-node connects to a locally running Cardano node and fully trusts the information that node\nprovides. This means the db-sync-node can omit validation of the cryptographic signatures on blocks,\ntransactions etc because the db-sync-node can assume these were checked by the locally running node\nwhich is providing blockchain data."}),"\n",(0,i.jsx)(n.h2,{id:"genesis-validation",children:"Genesis Validation"}),"\n",(0,i.jsx)(n.p,{children:'When the db-sync-node is started for the first time it reads the same JSON Genesis configuration as\nused by the Cardano node, validates the hash, extracts the Genesis Distribution and inserts the\nGenesis Distribution into the database and prints the total supply at Genesis (in Ada) to the logs.\nThe Genesis Distribution generates a set of transaction output for which there are no transaction\ninputs. Since the database schema requires that all output transaction are connected to block.\nTherefore a "fake" genesis block is inserted into the database for the Genesis transaction outputs\nto link to.'}),"\n",(0,i.jsx)(n.p,{children:"The first Epoch Boundary Block (EBB) has a previous block hash that is the hash of the JSON Genesis\nconfiguration file. The first EBB cannot be inserted into the database unless the previous hash\nalready exists in the database. For main net this looks like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Initial genesis distribution populated. Hash 5f20df933584822601f9e3f8c024eb5eb252fe8cefb24d1317dc3d432e940ebb\nTotal genesis supply of Ada: 31112484745.000000\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each time the db-sync-node is started, it again reads the JSON Genesis configuration, checks its hash,\nvalidates that the Genesis Distribution is correct and again prints the total of the Genesis supply.\nFor main net:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Initial genesis distribution present and correct\nTotal genesis supply of Ada: 31112484745.000000\n"})}),"\n",(0,i.jsx)(n.h2,{id:"block-validation",children:"Block Validation"}),"\n",(0,i.jsx)(n.p,{children:'Block validation is only done when blocks are added to the database. All blocks other than the\n"fake" Genesis block used to introduce the Genesis Distribution have a previous block index that\nmust be the index of a block already present in the database. Insertion of a block into the\ndatabase is done in two steps:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Look up the block's previous block hash in the ",(0,i.jsx)(n.code,{children:"Block"})," table to get its index."]}),"\n",(0,i.jsxs)(n.li,{children:["Insert the new block into the ",(0,i.jsx)(n.code,{children:"Block"})," table with the ",(0,i.jsx)(n.code,{children:"previous"})," field set to the index found\nby the preceding lookup."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This results in a database that contains a chain of blocks as one would expect from a blockchain."}),"\n",(0,i.jsx)(n.h2,{id:"transaction-validation",children:"Transaction Validation"}),"\n",(0,i.jsxs)(n.p,{children:["Transaction validation is only done when transactions are added to the database. All transactions\ncontain an index into the ",(0,i.jsx)(n.code,{children:"Block"})," table specifying the block in which the transaction was included.\nEach transaction included in a block (ie specifically ignoring the Genesis Distribution\ntransactions) have one or more inputs and one or more outputs. Transactions are validated in the\ndb-sync node by checking that all the transaction inputs exist and that the value of the inputs\nis greater than or equal to the value of the transaction outputs. As a by product of this validation\nthe fees associated with the transaction are recorded in the database."]}),"\n",(0,i.jsx)(n.h2,{id:"runtime-reward-validations",children:"Runtime Reward Validations"}),"\n",(0,i.jsxs)(n.p,{children:["Due to recent issues with reward related tables, extra validation was added. When that validation\nfails, there are now two options. ",(0,i.jsx)(n.code,{children:"db-sync"})," can abort or continue running. The behaviour is\nspecified by the presence or absence of the ",(0,i.jsx)(n.code,{children:"DbSyncAbortOnPanic"})," environemnt variable. If the\nvariable is set, a validation failure will abort ",(0,i.jsx)(n.code,{children:"db-sync"})," with a log/error message. This is the\nrecommended configuration for all non-mission critical installations. On start up, ",(0,i.jsx)(n.code,{children:"db-sync"})," also\nlogs the ",(0,i.jsx)(n.code,{children:"DbSyncAbortOnPanic"})," setting."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);